require 'rails_helper'
require_relative "#{Rails.root}/spec/support/shared_examples.rb"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe CategoriesController, :type => :controller do
  login_admin

  # This should return the minimal set of attributes required to create a valid
  # Category. As you add validations to Category, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { :name => 'Test category',
      :description => 'This is a test' }
  }

  let(:invalid_attributes) {
    { :name => '',
      :description => '' }
  }

  let(:examples) { FactoryBot.create_list(:category, 2) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CategoriesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  it_behaves_like 'a protected resource'

  describe 'GET#index' do
    before { get :index }
    it_behaves_like 'a success response', :index
    include_examples 'indexes resource', :categories, Category
  end

  describe 'GET #show' do
    before { get :show, :params => { :id => examples.first.to_param } }
    it_behaves_like 'a success response', :show
  end

  describe 'GET #new' do
    before { get :new, :params => {}, :session => valid_session }
    it_behaves_like 'a success response', :new
  end

  describe 'GET #edit' do
    before { get :edit, :params => { :id => examples.first.to_param }, :session => valid_session }
    it_behaves_like 'a success response', :edit
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Category' do
        expect do
          post :create, :params => { :category => valid_attributes }, :session => valid_session
        end.to change(Category, :count).by(1)
      end

      it 'redirects to the created category' do
        post :create, :params => { :category => valid_attributes }, :session => valid_session
        expect(response).to redirect_to(Category.last)
      end
    end

    context 'with invalid params' do
      it 'does not save the category' do
        expect do
          post :create, :params => { :category => invalid_attributes }, :session => valid_session
        end.to_not change(Category, :count)
      end

      it 'redirects to new' do
        post :create, :params => { :category => invalid_attributes }, :session => valid_session
        expect(response).to render_template :new
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      new_attr = { :name => 'new name', :description => 'blank' }

      it_behaves_like 'updatable resource', :category, new_attr

    end

    context 'with invalid params' do
      before do
        category = FactoryBot.create(:category)
        put :update, :params => { :id => category.id, :category => invalid_attributes }
      end

      it_behaves_like 'a success response', :edit

    end
  end

  describe 'DELETE #destroy' do
    include_examples 'destroy resource', Category
  end
end



