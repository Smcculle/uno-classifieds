require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe PicturesController, :type => :controller do
  login_admin
  # This should return the minimal set of attributes required to create a valid
  # Picture. As you add validations to Picture, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { :listing_id => FactoryBot.create(:listing).id }
  end

  let(:invalid_attributes) do
    {}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PicturesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'returns a success response' do
      get :index, :params => {}, :session => valid_session
      expect(response).to be_success
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      picture = FactoryBot.create(:picture)
      get :show, :params => { :id => picture.to_param }, :session => valid_session
      expect(response).to be_success
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      listing = FactoryBot.create(:listing)
      get :new, :params => { :listing_id => listing.id }, :session => valid_session
      expect(response).to be_success
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      picture = FactoryBot.create(:picture)
      get :edit, :params => { :id => picture.to_param }, :session => valid_session
      expect(response).to be_success
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Picture' do
        expect {
          p = FactoryBot.create(:picture)
          post :create, :params => { :picture => p.attributes }, :session => valid_session
        }.to change(Picture, :count).by(1)
      end

      it 'redirects to the created picture' do
        post :create, :params => { :picture => valid_attributes }, :session => valid_session
        expect(response).to redirect_to(Picture.last)
      end
    end

    context 'with invalid params' do
      it 'does not create picture' do
        post :create, :params => { :picture => { :listing_id => 0 } }, :session => valid_session
        expect(response.status).to eq 302
      end

      it 'redirects to listings' do
        post :create, :params => { :picture => { :listing_id => 0 } }, :session => valid_session
        expect(response).to redirect_to(pictures_path)
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested picture' do
      picture = FactoryBot.create(:picture)
      expect {
        delete :destroy, :params => { :id => picture.to_param }, :session => valid_session
      }.to change(Picture, :count).by(-1)
    end

    it 'redirects to the listings index' do
      picture = FactoryBot.create(:picture)
      delete :destroy, :params => { :id => picture.to_param }, :session => valid_session
      expect(response).to redirect_to(listing_url(picture.listing_id))
    end
  end
end

